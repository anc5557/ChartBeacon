version: '3.8'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://chartbeacon:chartbeacon123@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: 46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _AIRFLOW_WWW_USER_USERNAME: airflow
    _AIRFLOW_WWW_USER_PASSWORD: airflow
    DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
    TICKER_SYMBOLS: ${TICKER_SYMBOLS}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./api:/opt/airflow/api
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: chartbeacon
      POSTGRES_PASSWORD: chartbeacon123
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "chartbeacon"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # 디렉토리 생성 및 권한 설정
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins}
        
        # PostgreSQL이 완전히 준비될 때까지 대기
        echo "Waiting for PostgreSQL to be ready..."
        until pg_isready -h postgres -p 5432 -U chartbeacon; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 2
        done
        echo "PostgreSQL is ready!"
        
        # DB 초기화 (항상 실행하여 마이그레이션 포함)
        echo "Initializing/upgrading Airflow DB..."
        airflow db init
        
        # 관리자 사용자 생성
        echo "Creating admin user..."
        airflow users create \
          --username $${_AIRFLOW_WWW_USER_USERNAME} \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email admin@example.com \
          --password $${_AIRFLOW_WWW_USER_PASSWORD} \
          --use-random-password false \
          || echo "User already exists or creation failed, continuing..."
        
        echo "Airflow initialization completed!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    user: "0:0"
    volumes:
      - ./airflow:/sources
    restart: "no"

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://chartbeacon:chartbeacon123@postgres/chartbeacon
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      TICKER_SYMBOLS: ${TICKER_SYMBOLS}
      LOG_LEVEL: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - ./api:/app/api

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
      args:
        API_PORT: ${API_PORT:-8000}
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
    depends_on:
      - api
    restart: always

volumes:
  postgres_data: 